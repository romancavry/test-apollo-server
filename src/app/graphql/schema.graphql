type Query {
  getUser: User

  getMessages(dialogueId: Int!): [Message]

  getDialogues: [Dialogue]
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  verifyToken(token: String!): AuthPayload

  postMessage(text: String!, dialogueId: Int!): ID!

  createDialogue(name: String!): ID!
}

type Subscription {
  messages: [Message!]
}

# ------------
type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  sentMessages: [Message]
  dialogues: [Dialogue]
  dialoguesIds: [Int]!
  createdAt: String!
}

type Message {
  id: ID!
  text: String!
  senderId: Int!
  dialogueId: Int!
  createdAt: String!
}

type Dialogue {
  id: ID!
  name: String!
  users: [User]
  usersIds: [Int]!
  messages: [Message]
  messagesIds: [Int]!
  createdAt: String!
}

type AuthPayload {
  token: String
  user: User
}
